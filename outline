// The *SQLParser instance produced may be reused by calling the SetInputStream method.
func NewSQLParser(input antlr.TokenStream) *SQLParser {
func (p *SQLParser) Sql() (localctx ISqlContext) {
func (p *SQLParser) Qname_parser() (localctx IQname_parserContext) {
func (p *SQLParser) Function_args_parser() (localctx IFunction_args_parserContext) {
func (p *SQLParser) Vex_eof() (localctx IVex_eofContext) {
func (p *SQLParser) Plpgsql_function() (localctx IPlpgsql_functionContext) {
func (p *SQLParser) Plpgsql_function_test_list() (localctx IPlpgsql_function_test_listContext) {
func (p *SQLParser) Function_body_eof() (localctx IFunction_body_eofContext) {
func (p *SQLParser) Statement() (localctx IStatementContext) {
func (p *SQLParser) Data_statement() (localctx IData_statementContext) {
func (p *SQLParser) Script_statement() (localctx IScript_statementContext) {
func (p *SQLParser) Script_transaction() (localctx IScript_transactionContext) {
func (p *SQLParser) Transaction_mode() (localctx ITransaction_modeContext) {
func (p *SQLParser) Lock_table() (localctx ILock_tableContext) {
func (p *SQLParser) Lock_mode() (localctx ILock_modeContext) {
func (p *SQLParser) Script_additional() (localctx IScript_additionalContext) {
func (p *SQLParser) Additional_statement() (localctx IAdditional_statementContext) {
func (p *SQLParser) Explain_statement() (localctx IExplain_statementContext) {
func (p *SQLParser) Explain_query() (localctx IExplain_queryContext) {
func (p *SQLParser) Execute_statement() (localctx IExecute_statementContext) {
func (p *SQLParser) Declare_statement() (localctx IDeclare_statementContext) {
func (p *SQLParser) Show_statement() (localctx IShow_statementContext) {
func (p *SQLParser) Explain_option() (localctx IExplain_optionContext) {
func (p *SQLParser) User_name() (localctx IUser_nameContext) {
func (p *SQLParser) Table_cols_list() (localctx ITable_cols_listContext) {
func (p *SQLParser) Table_cols() (localctx ITable_colsContext) {
func (p *SQLParser) Vacuum_mode() (localctx IVacuum_modeContext) {
func (p *SQLParser) Vacuum_option() (localctx IVacuum_optionContext) {
func (p *SQLParser) Analyze_mode() (localctx IAnalyze_modeContext) {
func (p *SQLParser) Boolean_value() (localctx IBoolean_valueContext) {
func (p *SQLParser) Fetch_move_direction() (localctx IFetch_move_directionContext) {
func (p *SQLParser) Schema_statement() (localctx ISchema_statementContext) {
func (p *SQLParser) Schema_create() (localctx ISchema_createContext) {
func (p *SQLParser) Schema_alter() (localctx ISchema_alterContext) {
func (p *SQLParser) Schema_drop() (localctx ISchema_dropContext) {
func (p *SQLParser) Schema_import() (localctx ISchema_importContext) {
func (p *SQLParser) Alter_function_statement() (localctx IAlter_function_statementContext) {
func (p *SQLParser) Alter_aggregate_statement() (localctx IAlter_aggregate_statementContext) {
func (p *SQLParser) Alter_extension_statement() (localctx IAlter_extension_statementContext) {
func (p *SQLParser) Alter_extension_action() (localctx IAlter_extension_actionContext) {
func (p *SQLParser) Extension_member_object() (localctx IExtension_member_objectContext) {
func (p *SQLParser) Alter_schema_statement() (localctx IAlter_schema_statementContext) {
func (p *SQLParser) Alter_language_statement() (localctx IAlter_language_statementContext) {
func (p *SQLParser) Alter_table_statement() (localctx IAlter_table_statementContext) {
func (p *SQLParser) Table_action() (localctx ITable_actionContext) {
func (p *SQLParser) Column_action() (localctx IColumn_actionContext) {
func (p *SQLParser) Identity_body() (localctx IIdentity_bodyContext) {
func (p *SQLParser) Alter_identity() (localctx IAlter_identityContext) {
func (p *SQLParser) Storage_option() (localctx IStorage_optionContext) {
func (p *SQLParser) Validate_constraint() (localctx IValidate_constraintContext) {
func (p *SQLParser) Drop_constraint() (localctx IDrop_constraintContext) {
func (p *SQLParser) Table_deferrable() (localctx ITable_deferrableContext) {
func (p *SQLParser) Table_initialy_immed() (localctx ITable_initialy_immedContext) {
func (p *SQLParser) Function_actions_common() (localctx IFunction_actions_commonContext) {
func (p *SQLParser) Function_def() (localctx IFunction_defContext) {
func (p *SQLParser) Alter_index_statement() (localctx IAlter_index_statementContext) {
func (p *SQLParser) Index_def_action() (localctx IIndex_def_actionContext) {
func (p *SQLParser) Alter_default_privileges_statement() (localctx IAlter_default_privileges_statementContext) {
func (p *SQLParser) Abbreviated_grant_or_revoke() (localctx IAbbreviated_grant_or_revokeContext) {
func (p *SQLParser) Grant_option_for() (localctx IGrant_option_forContext) {
func (p *SQLParser) Alter_sequence_statement() (localctx IAlter_sequence_statementContext) {
func (p *SQLParser) Alter_view_statement() (localctx IAlter_view_statementContext) {
func (p *SQLParser) Alter_view_action() (localctx IAlter_view_actionContext) {
func (p *SQLParser) Alter_materialized_view_statement() (localctx IAlter_materialized_view_statementContext) {
func (p *SQLParser) Alter_materialized_view_action() (localctx IAlter_materialized_view_actionContext) {
func (p *SQLParser) Materialized_view_action() (localctx IMaterialized_view_actionContext) {
func (p *SQLParser) Alter_event_trigger_statement() (localctx IAlter_event_trigger_statementContext) {
func (p *SQLParser) Alter_event_trigger_action() (localctx IAlter_event_trigger_actionContext) {
func (p *SQLParser) Alter_type_statement() (localctx IAlter_type_statementContext) {
func (p *SQLParser) Alter_domain_statement() (localctx IAlter_domain_statementContext) {
func (p *SQLParser) Alter_server_statement() (localctx IAlter_server_statementContext) {
func (p *SQLParser) Alter_server_action() (localctx IAlter_server_actionContext) {
func (p *SQLParser) Alter_fts_statement() (localctx IAlter_fts_statementContext) {
func (p *SQLParser) Alter_fts_configuration() (localctx IAlter_fts_configurationContext) {
func (p *SQLParser) Type_action() (localctx IType_actionContext) {
func (p *SQLParser) Type_property() (localctx IType_propertyContext) {
func (p *SQLParser) Set_def_column() (localctx ISet_def_columnContext) {
func (p *SQLParser) Drop_def() (localctx IDrop_defContext) {
func (p *SQLParser) Create_index_statement() (localctx ICreate_index_statementContext) {
func (p *SQLParser) Index_rest() (localctx IIndex_restContext) {
func (p *SQLParser) Index_sort() (localctx IIndex_sortContext) {
func (p *SQLParser) Index_column() (localctx IIndex_columnContext) {
func (p *SQLParser) Including_index() (localctx IIncluding_indexContext) {
func (p *SQLParser) Index_where() (localctx IIndex_whereContext) {
func (p *SQLParser) Create_extension_statement() (localctx ICreate_extension_statementContext) {
func (p *SQLParser) Create_language_statement() (localctx ICreate_language_statementContext) {
func (p *SQLParser) Create_event_trigger_statement() (localctx ICreate_event_trigger_statementContext) {
func (p *SQLParser) Create_type_statement() (localctx ICreate_type_statementContext) {
func (p *SQLParser) Create_domain_statement() (localctx ICreate_domain_statementContext) {
func (p *SQLParser) Create_server_statement() (localctx ICreate_server_statementContext) {
func (p *SQLParser) Create_fts_dictionary_statement() (localctx ICreate_fts_dictionary_statementContext) {
func (p *SQLParser) Option_with_value() (localctx IOption_with_valueContext) {
func (p *SQLParser) Create_fts_configuration_statement() (localctx ICreate_fts_configuration_statementContext) {
func (p *SQLParser) Create_fts_template_statement() (localctx ICreate_fts_template_statementContext) {
func (p *SQLParser) Create_fts_parser_statement() (localctx ICreate_fts_parser_statementContext) {
func (p *SQLParser) Create_collation_statement() (localctx ICreate_collation_statementContext) {
func (p *SQLParser) Alter_collation_statement() (localctx IAlter_collation_statementContext) {
func (p *SQLParser) Collation_option() (localctx ICollation_optionContext) {
func (p *SQLParser) Create_user_mapping_statement() (localctx ICreate_user_mapping_statementContext) {
func (p *SQLParser) Alter_user_mapping_statement() (localctx IAlter_user_mapping_statementContext) {
func (p *SQLParser) Alter_user_or_role_statement() (localctx IAlter_user_or_role_statementContext) {
func (p *SQLParser) Alter_user_or_role_set_reset() (localctx IAlter_user_or_role_set_resetContext) {
func (p *SQLParser) Set_reset_parameter() (localctx ISet_reset_parameterContext) {
func (p *SQLParser) Alter_group_statement() (localctx IAlter_group_statementContext) {
func (p *SQLParser) Alter_group_action() (localctx IAlter_group_actionContext) {
func (p *SQLParser) Alter_tablespace_statement() (localctx IAlter_tablespace_statementContext) {
func (p *SQLParser) Alter_owner_statement() (localctx IAlter_owner_statementContext) {
func (p *SQLParser) Alter_tablespace_action() (localctx IAlter_tablespace_actionContext) {
func (p *SQLParser) Alter_statistics_statement() (localctx IAlter_statistics_statementContext) {
func (p *SQLParser) Set_statistics() (localctx ISet_statisticsContext) {
func (p *SQLParser) Alter_foreign_data_wrapper() (localctx IAlter_foreign_data_wrapperContext) {
func (p *SQLParser) Alter_foreign_data_wrapper_action() (localctx IAlter_foreign_data_wrapper_actionContext) {
func (p *SQLParser) Alter_operator_statement() (localctx IAlter_operator_statementContext) {
func (p *SQLParser) Alter_operator_action() (localctx IAlter_operator_actionContext) {
func (p *SQLParser) Operator_set_restrict_join() (localctx IOperator_set_restrict_joinContext) {
func (p *SQLParser) Drop_user_mapping_statement() (localctx IDrop_user_mapping_statementContext) {
func (p *SQLParser) Drop_owned_statement() (localctx IDrop_owned_statementContext) {
func (p *SQLParser) Drop_operator_statement() (localctx IDrop_operator_statementContext) {
func (p *SQLParser) Target_operator() (localctx ITarget_operatorContext) {
func (p *SQLParser) Domain_constraint() (localctx IDomain_constraintContext) {
func (p *SQLParser) Create_transform_statement() (localctx ICreate_transform_statementContext) {
func (p *SQLParser) Create_access_method_statement() (localctx ICreate_access_method_statementContext) {
func (p *SQLParser) Create_user_or_role_statement() (localctx ICreate_user_or_role_statementContext) {
func (p *SQLParser) User_or_role_option() (localctx IUser_or_role_optionContext) {
func (p *SQLParser) User_or_role_option_for_alter() (localctx IUser_or_role_option_for_alterContext) {
func (p *SQLParser) User_or_role_or_group_common_option() (localctx IUser_or_role_or_group_common_optionContext) {
func (p *SQLParser) User_or_role_common_option() (localctx IUser_or_role_common_optionContext) {
func (p *SQLParser) User_or_role_or_group_option_for_create() (localctx IUser_or_role_or_group_option_for_createContext) {
func (p *SQLParser) Create_group_statement() (localctx ICreate_group_statementContext) {
func (p *SQLParser) Group_option() (localctx IGroup_optionContext) {
func (p *SQLParser) Create_tablespace_statement() (localctx ICreate_tablespace_statementContext) {
func (p *SQLParser) Create_statistics_statement() (localctx ICreate_statistics_statementContext) {
func (p *SQLParser) Create_foreign_data_wrapper_statement() (localctx ICreate_foreign_data_wrapper_statementContext) {
func (p *SQLParser) Create_operator_statement() (localctx ICreate_operator_statementContext) {
func (p *SQLParser) Operator_name() (localctx IOperator_nameContext) {
func (p *SQLParser) Operator_option() (localctx IOperator_optionContext) {
func (p *SQLParser) Create_aggregate_statement() (localctx ICreate_aggregate_statementContext) {
func (p *SQLParser) Aggregate_param() (localctx IAggregate_paramContext) {
func (p *SQLParser) Set_statement() (localctx ISet_statementContext) {
func (p *SQLParser) Set_action() (localctx ISet_actionContext) {
func (p *SQLParser) Session_local_option() (localctx ISession_local_optionContext) {
func (p *SQLParser) Set_statement_value() (localctx ISet_statement_valueContext) {
func (p *SQLParser) Create_rewrite_statement() (localctx ICreate_rewrite_statementContext) {
func (p *SQLParser) Rewrite_command() (localctx IRewrite_commandContext) {
func (p *SQLParser) Create_trigger_statement() (localctx ICreate_trigger_statementContext) {
func (p *SQLParser) Trigger_referencing() (localctx ITrigger_referencingContext) {
func (p *SQLParser) When_trigger() (localctx IWhen_triggerContext) {
func (p *SQLParser) Rule_common() (localctx IRule_commonContext) {
func (p *SQLParser) Rule_member_object() (localctx IRule_member_objectContext) {
func (p *SQLParser) Columns_permissions() (localctx IColumns_permissionsContext) {
func (p *SQLParser) Table_column_privileges() (localctx ITable_column_privilegesContext) {
func (p *SQLParser) Permissions() (localctx IPermissionsContext) {
func (p *SQLParser) Permission() (localctx IPermissionContext) {
func (p *SQLParser) Other_rules() (localctx IOther_rulesContext) {
func (p *SQLParser) Grant_to_rule() (localctx IGrant_to_ruleContext) {
func (p *SQLParser) Revoke_from_cascade_restrict() (localctx IRevoke_from_cascade_restrictContext) {
func (p *SQLParser) Roles_names() (localctx IRoles_namesContext) {
func (p *SQLParser) Role_name_with_group() (localctx IRole_name_with_groupContext) {
func (p *SQLParser) Granted_by() (localctx IGranted_byContext) {
func (p *SQLParser) Comment_on_statement() (localctx IComment_on_statementContext) {
func (p *SQLParser) Security_label() (localctx ISecurity_labelContext) {
func (p *SQLParser) Comment_member_object() (localctx IComment_member_objectContext) {
func (p *SQLParser) Label_member_object() (localctx ILabel_member_objectContext) {
func (p *SQLParser) Create_function_statement() (localctx ICreate_function_statementContext) {
func (p *SQLParser) Transform_for_type() (localctx ITransform_for_typeContext) {
func (p *SQLParser) Function_ret_table() (localctx IFunction_ret_tableContext) {
func (p *SQLParser) Function_column_name_type() (localctx IFunction_column_name_typeContext) {
func (p *SQLParser) Function_parameters() (localctx IFunction_parametersContext) {
func (p *SQLParser) Function_args() (localctx IFunction_argsContext) {
func (p *SQLParser) Agg_order() (localctx IAgg_orderContext) {
func (p *SQLParser) Function_body() (localctx IFunction_bodyContext) {
func (p *SQLParser) Function_return() (localctx IFunction_returnContext) {
func (p *SQLParser) Character_string() (localctx ICharacter_stringContext) {
func (p *SQLParser) Function_arguments() (localctx IFunction_argumentsContext) {
func (p *SQLParser) Argmode() (localctx IArgmodeContext) {
func (p *SQLParser) Create_sequence_statement() (localctx ICreate_sequence_statementContext) {
func (p *SQLParser) Sequence_body() (localctx ISequence_bodyContext) {
func (p *SQLParser) Signed_number_literal() (localctx ISigned_number_literalContext) {
func (p *SQLParser) Signed_numerical_literal() (localctx ISigned_numerical_literalContext) {
func (p *SQLParser) Sign() (localctx ISignContext) {
func (p *SQLParser) Create_schema_statement() (localctx ICreate_schema_statementContext) {
func (p *SQLParser) Create_policy_statement() (localctx ICreate_policy_statementContext) {
func (p *SQLParser) Alter_policy_statement() (localctx IAlter_policy_statementContext) {
func (p *SQLParser) Drop_policy_statement() (localctx IDrop_policy_statementContext) {
func (p *SQLParser) Create_subscription_statement() (localctx ICreate_subscription_statementContext) {
func (p *SQLParser) Alter_subscription_statement() (localctx IAlter_subscription_statementContext) {
func (p *SQLParser) Alter_subscription_action() (localctx IAlter_subscription_actionContext) {
func (p *SQLParser) Create_cast_statement() (localctx ICreate_cast_statementContext) {
func (p *SQLParser) Cast_name() (localctx ICast_nameContext) {
func (p *SQLParser) Drop_cast_statement() (localctx IDrop_cast_statementContext) {
func (p *SQLParser) Create_operator_family_statement() (localctx ICreate_operator_family_statementContext) {
func (p *SQLParser) Alter_operator_family_statement() (localctx IAlter_operator_family_statementContext) {
func (p *SQLParser) Operator_family_action() (localctx IOperator_family_actionContext) {
func (p *SQLParser) Add_operator_to_family() (localctx IAdd_operator_to_familyContext) {
func (p *SQLParser) Drop_operator_from_family() (localctx IDrop_operator_from_familyContext) {
func (p *SQLParser) Drop_operator_family_statement() (localctx IDrop_operator_family_statementContext) {
func (p *SQLParser) Create_operator_class_statement() (localctx ICreate_operator_class_statementContext) {
func (p *SQLParser) Create_operator_class_option() (localctx ICreate_operator_class_optionContext) {
func (p *SQLParser) Alter_operator_class_statement() (localctx IAlter_operator_class_statementContext) {
func (p *SQLParser) Drop_operator_class_statement() (localctx IDrop_operator_class_statementContext) {
func (p *SQLParser) Create_conversion_statement() (localctx ICreate_conversion_statementContext) {
func (p *SQLParser) Alter_conversion_statement() (localctx IAlter_conversion_statementContext) {
func (p *SQLParser) Create_publication_statement() (localctx ICreate_publication_statementContext) {
func (p *SQLParser) Alter_publication_statement() (localctx IAlter_publication_statementContext) {
func (p *SQLParser) Alter_publication_action() (localctx IAlter_publication_actionContext) {
func (p *SQLParser) Only_table_multiply() (localctx IOnly_table_multiplyContext) {
func (p *SQLParser) Alter_trigger_statement() (localctx IAlter_trigger_statementContext) {
func (p *SQLParser) Alter_rule_statement() (localctx IAlter_rule_statementContext) {
func (p *SQLParser) Copy_statement() (localctx ICopy_statementContext) {
func (p *SQLParser) Copy_from_statement() (localctx ICopy_from_statementContext) {
func (p *SQLParser) Copy_to_statement() (localctx ICopy_to_statementContext) {
func (p *SQLParser) Copy_option_list() (localctx ICopy_option_listContext) {
func (p *SQLParser) Copy_option() (localctx ICopy_optionContext) {
func (p *SQLParser) Create_view_statement() (localctx ICreate_view_statementContext) {
func (p *SQLParser) If_exists() (localctx IIf_existsContext) {
func (p *SQLParser) If_not_exists() (localctx IIf_not_existsContext) {
func (p *SQLParser) View_columns() (localctx IView_columnsContext) {
func (p *SQLParser) With_check_option() (localctx IWith_check_optionContext) {
func (p *SQLParser) Create_database_statement() (localctx ICreate_database_statementContext) {
func (p *SQLParser) Create_database_option() (localctx ICreate_database_optionContext) {
func (p *SQLParser) Alter_database_statement() (localctx IAlter_database_statementContext) {
func (p *SQLParser) Alter_database_action() (localctx IAlter_database_actionContext) {
func (p *SQLParser) Alter_database_option() (localctx IAlter_database_optionContext) {
func (p *SQLParser) Create_table_statement() (localctx ICreate_table_statementContext) {
func (p *SQLParser) Create_table_as_statement() (localctx ICreate_table_as_statementContext) {
func (p *SQLParser) Create_foreign_table_statement() (localctx ICreate_foreign_table_statementContext) {
func (p *SQLParser) Define_table() (localctx IDefine_tableContext) {
func (p *SQLParser) Define_partition() (localctx IDefine_partitionContext) {
func (p *SQLParser) For_values_bound() (localctx IFor_values_boundContext) {
func (p *SQLParser) Partition_bound_spec() (localctx IPartition_bound_specContext) {
func (p *SQLParser) Partition_bound_part() (localctx IPartition_bound_partContext) {
func (p *SQLParser) Define_columns() (localctx IDefine_columnsContext) {
func (p *SQLParser) Define_type() (localctx IDefine_typeContext) {
func (p *SQLParser) Partition_by() (localctx IPartition_byContext) {
func (p *SQLParser) Partition_method() (localctx IPartition_methodContext) {
func (p *SQLParser) Partition_column() (localctx IPartition_columnContext) {
func (p *SQLParser) Define_server() (localctx IDefine_serverContext) {
func (p *SQLParser) Define_foreign_options() (localctx IDefine_foreign_optionsContext) {
func (p *SQLParser) Foreign_option() (localctx IForeign_optionContext) {
func (p *SQLParser) Foreign_option_name() (localctx IForeign_option_nameContext) {
func (p *SQLParser) List_of_type_column_def() (localctx IList_of_type_column_defContext) {
func (p *SQLParser) Table_column_def() (localctx ITable_column_defContext) {
func (p *SQLParser) Table_of_type_column_def() (localctx ITable_of_type_column_defContext) {
func (p *SQLParser) Table_column_definition() (localctx ITable_column_definitionContext) {
func (p *SQLParser) Like_option() (localctx ILike_optionContext) {
func (p *SQLParser) Constraint_common() (localctx IConstraint_commonContext) {
func (p *SQLParser) Constr_body() (localctx IConstr_bodyContext) {
func (p *SQLParser) All_op() (localctx IAll_opContext) {
func (p *SQLParser) All_simple_op() (localctx IAll_simple_opContext) {
func (p *SQLParser) Op_chars() (localctx IOp_charsContext) {
func (p *SQLParser) Index_parameters() (localctx IIndex_parametersContext) {
func (p *SQLParser) Names_in_parens() (localctx INames_in_parensContext) {
func (p *SQLParser) Names_references() (localctx INames_referencesContext) {
func (p *SQLParser) Storage_parameter() (localctx IStorage_parameterContext) {
func (p *SQLParser) Storage_parameter_option() (localctx IStorage_parameter_optionContext) {
func (p *SQLParser) Storage_parameter_name() (localctx IStorage_parameter_nameContext) {
func (p *SQLParser) With_storage_parameter() (localctx IWith_storage_parameterContext) {
func (p *SQLParser) Storage_parameter_oid() (localctx IStorage_parameter_oidContext) {
func (p *SQLParser) On_commit() (localctx IOn_commitContext) {
func (p *SQLParser) Table_space() (localctx ITable_spaceContext) {
func (p *SQLParser) Set_tablespace() (localctx ISet_tablespaceContext) {
func (p *SQLParser) Action() (localctx IActionContext) {
func (p *SQLParser) Owner_to() (localctx IOwner_toContext) {
func (p *SQLParser) Rename_to() (localctx IRename_toContext) {
func (p *SQLParser) Set_schema() (localctx ISet_schemaContext) {
func (p *SQLParser) Table_column_privilege() (localctx ITable_column_privilegeContext) {
func (p *SQLParser) Usage_select_update() (localctx IUsage_select_updateContext) {
func (p *SQLParser) Partition_by_columns() (localctx IPartition_by_columnsContext) {
func (p *SQLParser) Cascade_restrict() (localctx ICascade_restrictContext) {
func (p *SQLParser) Compression_identifier() (localctx ICompression_identifierContext) {
func (p *SQLParser) Collate_identifier() (localctx ICollate_identifierContext) {
func (p *SQLParser) Indirection_var() (localctx IIndirection_varContext) {
func (p *SQLParser) Dollar_number() (localctx IDollar_numberContext) {
func (p *SQLParser) Indirection_list() (localctx IIndirection_listContext) {
func (p *SQLParser) Indirection() (localctx IIndirectionContext) {
func (p *SQLParser) Drop_database_statement() (localctx IDrop_database_statementContext) {
func (p *SQLParser) Drop_function_statement() (localctx IDrop_function_statementContext) {
func (p *SQLParser) Drop_trigger_statement() (localctx IDrop_trigger_statementContext) {
func (p *SQLParser) Drop_rule_statement() (localctx IDrop_rule_statementContext) {
func (p *SQLParser) Drop_statements() (localctx IDrop_statementsContext) {
func (p *SQLParser) If_exist_names_restrict_cascade() (localctx IIf_exist_names_restrict_cascadeContext) {
func (p *SQLParser) Id_token() (localctx IId_tokenContext) {
func (p *SQLParser) Identifier() (localctx IIdentifierContext) {
func (p *SQLParser) Identifier_nontype() (localctx IIdentifier_nontypeContext) {
func (p *SQLParser) Col_label() (localctx ICol_labelContext) {
func (p *SQLParser) Bare_col_label() (localctx IBare_col_labelContext) {
func (p *SQLParser) Bare_label_keyword() (localctx IBare_label_keywordContext) {
func (p *SQLParser) Tokens_nonreserved() (localctx ITokens_nonreservedContext) {
func (p *SQLParser) Tokens_nonreserved_except_function_type() (localctx ITokens_nonreserved_except_function_typeContext) {
func (p *SQLParser) Tokens_reserved_except_function_type() (localctx ITokens_reserved_except_function_typeContext) {
func (p *SQLParser) Tokens_reserved() (localctx ITokens_reservedContext) {
func (p *SQLParser) Tokens_nonkeyword() (localctx ITokens_nonkeywordContext) {
func (p *SQLParser) Schema_qualified_name_nontype() (localctx ISchema_qualified_name_nontypeContext) {
func (p *SQLParser) Type_list() (localctx IType_listContext) {
func (p *SQLParser) Data_type() (localctx IData_typeContext) {
func (p *SQLParser) Array_type() (localctx IArray_typeContext) {
func (p *SQLParser) Predefined_type() (localctx IPredefined_typeContext) {
func (p *SQLParser) Interval_field() (localctx IInterval_fieldContext) {
func (p *SQLParser) Type_length() (localctx IType_lengthContext) {
func (p *SQLParser) Precision_param() (localctx IPrecision_paramContext) {
func (p *SQLParser) Vex() (localctx IVexContext) {
func (p *SQLParser) vex(_p int) (localctx IVexContext) {
func (p *SQLParser) Vex_b() (localctx IVex_bContext) {
func (p *SQLParser) vex_b(_p int) (localctx IVex_bContext) {
func (p *SQLParser) Op() (localctx IOpContext) {
func (p *SQLParser) All_op_ref() (localctx IAll_op_refContext) {
func (p *SQLParser) Datetime_overlaps() (localctx IDatetime_overlapsContext) {
func (p *SQLParser) Value_expression_primary() (localctx IValue_expression_primaryContext) {
func (p *SQLParser) Unsigned_value_specification() (localctx IUnsigned_value_specificationContext) {
func (p *SQLParser) Unsigned_numeric_literal() (localctx IUnsigned_numeric_literalContext) {
func (p *SQLParser) Truth_value() (localctx ITruth_valueContext) {
func (p *SQLParser) Case_expression() (localctx ICase_expressionContext) {
func (p *SQLParser) Cast_specification() (localctx ICast_specificationContext) {
func (p *SQLParser) Function_call() (localctx IFunction_callContext) {
func (p *SQLParser) Vex_or_named_notation() (localctx IVex_or_named_notationContext) {
func (p *SQLParser) Pointer() (localctx IPointerContext) {
func (p *SQLParser) Function_construct() (localctx IFunction_constructContext) {
func (p *SQLParser) Extract_function() (localctx IExtract_functionContext) {
func (p *SQLParser) System_function() (localctx ISystem_functionContext) {
func (p *SQLParser) Date_time_function() (localctx IDate_time_functionContext) {
func (p *SQLParser) String_value_function() (localctx IString_value_functionContext) {
func (p *SQLParser) Xml_function() (localctx IXml_functionContext) {
func (p *SQLParser) Xml_table_column() (localctx IXml_table_columnContext) {
func (p *SQLParser) Comparison_mod() (localctx IComparison_modContext) {
func (p *SQLParser) Filter_clause() (localctx IFilter_clauseContext) {
func (p *SQLParser) Window_definition() (localctx IWindow_definitionContext) {
func (p *SQLParser) Frame_clause() (localctx IFrame_clauseContext) {
func (p *SQLParser) Frame_bound() (localctx IFrame_boundContext) {
func (p *SQLParser) Array_expression() (localctx IArray_expressionContext) {
func (p *SQLParser) Array_elements() (localctx IArray_elementsContext) {
func (p *SQLParser) Type_coercion() (localctx IType_coercionContext) {
func (p *SQLParser) Schema_qualified_name() (localctx ISchema_qualified_nameContext) {
func (p *SQLParser) Set_qualifier() (localctx ISet_qualifierContext) {
func (p *SQLParser) Table_subquery() (localctx ITable_subqueryContext) {
func (p *SQLParser) Select_stmt() (localctx ISelect_stmtContext) {
func (p *SQLParser) After_ops() (localctx IAfter_opsContext) {
func (p *SQLParser) Select_stmt_no_parens() (localctx ISelect_stmt_no_parensContext) {
func (p *SQLParser) With_clause() (localctx IWith_clauseContext) {
func (p *SQLParser) With_query() (localctx IWith_queryContext) {
func (p *SQLParser) Select_ops() (localctx ISelect_opsContext) {
func (p *SQLParser) select_ops(_p int) (localctx ISelect_opsContext) {
func (p *SQLParser) Select_ops_no_parens() (localctx ISelect_ops_no_parensContext) {
func (p *SQLParser) Select_primary() (localctx ISelect_primaryContext) {
func (p *SQLParser) Select_list() (localctx ISelect_listContext) {
func (p *SQLParser) Select_sublist() (localctx ISelect_sublistContext) {
func (p *SQLParser) Into_table() (localctx IInto_tableContext) {
func (p *SQLParser) From_item() (localctx IFrom_itemContext) {
func (p *SQLParser) from_item(_p int) (localctx IFrom_itemContext) {
func (p *SQLParser) From_primary() (localctx IFrom_primaryContext) {
func (p *SQLParser) Alias_clause() (localctx IAlias_clauseContext) {
func (p *SQLParser) From_function_column_def() (localctx IFrom_function_column_defContext) {
func (p *SQLParser) Groupby_clause() (localctx IGroupby_clauseContext) {
func (p *SQLParser) Grouping_element_list() (localctx IGrouping_element_listContext) {
func (p *SQLParser) Grouping_element() (localctx IGrouping_elementContext) {
func (p *SQLParser) Values_stmt() (localctx IValues_stmtContext) {
func (p *SQLParser) Values_values() (localctx IValues_valuesContext) {
func (p *SQLParser) Orderby_clause() (localctx IOrderby_clauseContext) {
func (p *SQLParser) Sort_specifier() (localctx ISort_specifierContext) {
func (p *SQLParser) Order_specification() (localctx IOrder_specificationContext) {
func (p *SQLParser) Null_ordering() (localctx INull_orderingContext) {
func (p *SQLParser) Insert_stmt_for_psql() (localctx IInsert_stmt_for_psqlContext) {
func (p *SQLParser) Insert_columns() (localctx IInsert_columnsContext) {
func (p *SQLParser) Indirection_identifier() (localctx IIndirection_identifierContext) {
func (p *SQLParser) Conflict_object() (localctx IConflict_objectContext) {
func (p *SQLParser) Conflict_action() (localctx IConflict_actionContext) {
func (p *SQLParser) Delete_stmt_for_psql() (localctx IDelete_stmt_for_psqlContext) {
func (p *SQLParser) Update_stmt_for_psql() (localctx IUpdate_stmt_for_psqlContext) {
func (p *SQLParser) Update_set() (localctx IUpdate_setContext) {
func (p *SQLParser) Notify_stmt() (localctx INotify_stmtContext) {
func (p *SQLParser) Truncate_stmt() (localctx ITruncate_stmtContext) {
func (p *SQLParser) Identifier_list() (localctx IIdentifier_listContext) {
func (p *SQLParser) Anonymous_block() (localctx IAnonymous_blockContext) {
func (p *SQLParser) Comp_options() (localctx IComp_optionsContext) {
func (p *SQLParser) Function_block() (localctx IFunction_blockContext) {
func (p *SQLParser) Start_label() (localctx IStart_labelContext) {
func (p *SQLParser) Declarations() (localctx IDeclarationsContext) {
func (p *SQLParser) Declaration() (localctx IDeclarationContext) {
func (p *SQLParser) Type_declaration() (localctx IType_declarationContext) {
func (p *SQLParser) Arguments_list() (localctx IArguments_listContext) {
func (p *SQLParser) Data_type_dec() (localctx IData_type_decContext) {
func (p *SQLParser) Exception_statement() (localctx IException_statementContext) {
func (p *SQLParser) Function_statements() (localctx IFunction_statementsContext) {
func (p *SQLParser) Function_statement() (localctx IFunction_statementContext) {
func (p *SQLParser) Base_statement() (localctx IBase_statementContext) {
func (p *SQLParser) Var() (localctx IVarContext) {
func (p *SQLParser) Diagnostic_option() (localctx IDiagnostic_optionContext) {
func (p *SQLParser) Perform_stmt() (localctx IPerform_stmtContext) {
func (p *SQLParser) Assign_stmt() (localctx IAssign_stmtContext) {
func (p *SQLParser) Execute_stmt() (localctx IExecute_stmtContext) {
func (p *SQLParser) Control_statement() (localctx IControl_statementContext) {
func (p *SQLParser) Cursor_statement() (localctx ICursor_statementContext) {
func (p *SQLParser) Option() (localctx IOptionContext) {
func (p *SQLParser) Transaction_statement() (localctx ITransaction_statementContext) {
func (p *SQLParser) Message_statement() (localctx IMessage_statementContext) {
func (p *SQLParser) Log_level() (localctx ILog_levelContext) {
func (p *SQLParser) Raise_using() (localctx IRaise_usingContext) {
func (p *SQLParser) Raise_param() (localctx IRaise_paramContext) {
func (p *SQLParser) Return_stmt() (localctx IReturn_stmtContext) {
func (p *SQLParser) Loop_statement() (localctx ILoop_statementContext) {
func (p *SQLParser) Loop_start() (localctx ILoop_startContext) {
func (p *SQLParser) Using_vex() (localctx IUsing_vexContext) {
func (p *SQLParser) If_statement() (localctx IIf_statementContext) {
func (p *SQLParser) Case_statement() (localctx ICase_statementContext) {
func (p *SQLParser) Plpgsql_query() (localctx IPlpgsql_queryContext) {
func (p *SQLParser) Sempred(localctx antlr.RuleContext, ruleIndex, predIndex int) bool {
func (p *SQLParser) Vex_Sempred(localctx antlr.RuleContext, predIndex int) bool {
func (p *SQLParser) Vex_b_Sempred(localctx antlr.RuleContext, predIndex int) bool {
func (p *SQLParser) Select_ops_Sempred(localctx antlr.RuleContext, predIndex int) bool {
func (p *SQLParser) From_item_Sempred(localctx antlr.RuleContext, predIndex int) bool {
